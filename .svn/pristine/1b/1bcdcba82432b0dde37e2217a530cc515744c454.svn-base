using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Speech.Recognition;
using System.Threading;

namespace AsynchronousRecognition
{
    public class SpeechService
    {
        private const int SECONDS = 60;
        bool completed;
        string text;

        public string WavToSrt()
        {
            using (SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine(new CultureInfo("en-US")))
            {
                recognizer.LoadGrammar(new DictationGrammar() { Name = "Dictation Grammar" });
                recognizer.SpeechDetected += new EventHandler<SpeechDetectedEventArgs>(SpeechDetectedHandler);
                recognizer.SpeechRecognized += new EventHandler<SpeechRecognizedEventArgs>(SpeechRecognizedHandler);
                recognizer.RecognizeCompleted += new EventHandler<RecognizeCompletedEventArgs>(RecognizeCompletedHandler);
                recognizer.SetInputToWaveFile(@"c:\greg\ebooktotxo\fc2.wav");
                recognizer.RecognizeAsync(RecognizeMode.Multiple);
                Thread.Sleep(TimeSpan.FromSeconds(SECONDS));
                recognizer.RecognizeAsyncStop();

                while (!completed)
                {
                    Thread.Sleep(333);
                }
            }

            return text;
        }

         void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)
        {
            string time = e.AudioPosition.ToString(@"hh\:mm\:ss\.ff") + " ";
            text += time;
            //Console.Write(time);
        }

         void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)
        {
            string resultText = "<not available>";

            if (e.Result != null)
            {
                resultText = e.Result.Text;
            }

            ProcessSentence(resultText);
        }

        private  void ProcessSentence(string resultText)
        {
            text += resultText + "\n";
            Console.WriteLine(resultText);
        }

         void RecognizeCompletedHandler(object sender, RecognizeCompletedEventArgs e)
        {
            if (e.Error != null)
            {
                Console.WriteLine(" - Error occurred during recognition: {0}", e.Error);
                return;
            }
            if (e.Cancelled) { }
            if (e.InitialSilenceTimeout || e.BabbleTimeout)
            {
                Console.WriteLine(" - BabbleTimeout = {0}; InitialSilenceTimeout = {1}", e.BabbleTimeout, e.InitialSilenceTimeout);
                return;
            }
            if (e.InputStreamEnded)
            {
                Console.WriteLine(" - AudioPosition = {0}; InputStreamEnded = {1}", e.AudioPosition, e.InputStreamEnded);
            }
            if (e.Result != null) { }
            else
            {
                Console.WriteLine(" - No result.");
            }

            completed = true;
        }
    }
}
