using SabeExtentions;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace SabeMatcher
{
    public class Matcher
    {
        List<string> ebook, speech;
        public List<string> Results { get; set; }
        int i;

        public Matcher(List<string> ebook, List<string> speech)
        {
            this.ebook = ebook;
            this.speech = speech;
            Results = new List<string>();
        }

        public void Process(string mode = "prod")
        {
            while (ebook.Any() && speech.Any())
            {
                Match(mode);
                ebook.RemoveAt(0);
                speech.RemoveAt(0);
            }
        }

        private void Match(string mode)
        {
            var ebookLine = ebook[0];
            var speechLine = speech[0];
            var step1Result = Compare(ebookLine, speechLine);
            CompareResult step2Result2sentences = new CompareResult();
            CompareResult step3Resultmissingsentence = new CompareResult();
            //step4book sentence should be splitted;if last speechword is in the middle
            if (ebook.Count > 1)
            {
                step2Result2sentences = Compare(ebookLine + ebook[1], speechLine);
                step3Resultmissingsentence = Compare(ebook[1], speechLine);
            }

            var compareResult = step1Result;

            if (step2Result2sentences > step1Result)
            {
                ebookLine += ebook[1];
                ebook.RemoveAt(0);
                compareResult = step2Result2sentences;
            }

            if (step3Resultmissingsentence > step2Result2sentences)
            {
                ebookLine = ebook[1];
                if (mode == "prod")
                    WriteRedLine("Missed sentence:" + ebook[0]);
                ebook.RemoveAt(0);
                compareResult = step3Resultmissingsentence;
            }
            var result = ebookLine;
            Results.Add
            (
                result
                    .Replace('”', ' ')
                    .Replace('“', ' ')
                    .Replace('’', '\'')
            );

            if (mode == "prod")
            {
                Console.WriteLine(i + result + "|word count:" + ebookLine.WordCount());
                Console.WriteLine("  " + speechLine + "|word count:" + speechLine.WordCount() + "|numberOfTheSameWords:" + compareResult.NumberOfTheSameWords + "|similarity:" + compareResult.Similarity);
                Console.WriteLine();//empty line to separate sentences
            }
            else
            {
                string testnumber = null;

                if (i < 10)
                {
                    testnumber = "0";
                }

                Console.WriteLine(
                    "[Test]public void Line" + testnumber + i + "(){Assert.AreEqual(\"" 
                    + Results[i]
                        .Replace('”', ' ')
                        .Replace('“', ' ')
                        .Replace('’', '\'')
                    + "\", matcher.Results[" + i + "]);}"
                    );
                
            }
            i++;
        }

        private CompareResult Compare(string ebookLine, string speechLine)
        {
            CompareResult compareResult = new CompareResult();
            //1.word count
            var ebookWc = ebookLine.WordCount();
            var speechWc = speechLine.WordCount();
            compareResult.WCresult = Math.Abs(ebookWc - speechWc);

            //2.TheSameWords 
            compareResult.NumberOfTheSameWords = ebookLine.NumberOfTheSameWords(speechLine);//compare with speechWc
            //3.similarity
            compareResult.Similarity = CompareStrings(speechLine + ".".ToLower(), ebookLine.ToLower());

            return compareResult;
        }

        private static void WriteRedLine(string text)
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(text);
            Console.ResetColor();
        }

        public double CompareStrings(string str1, string str2)
        {
            List<string> pairs1 = WordLetterPairs(str1.ToUpper());
            List<string> pairs2 = WordLetterPairs(str2.ToUpper());

            int intersection = 0;
            int union = pairs1.Count + pairs2.Count;

            for (int i = 0; i < pairs1.Count; i++)
            {
                for (int j = 0; j < pairs2.Count; j++)
                {
                    if (pairs1[i] == pairs2[j])
                    {
                        intersection++;
                        pairs2.RemoveAt(j);//Must remove the match to prevent "GGGG" from appearing to match "GG" with 100% success

                        break;
                    }
                }
            }

            return (2.0 * intersection) / union;
        }

        /// <summary>
        /// Gets all letter pairs for each
        /// individual word in the string
        /// </summary>
        /// <param name="str"></param>
        /// <returns></returns>
        private List<string> WordLetterPairs(string str)
        {
            List<string> AllPairs = new List<string>();

            // Tokenize the string and put the tokens/words into an array
            string[] Words = Regex.Split(str, @"\s");

            // For each word
            for (int w = 0; w < Words.Length; w++)
            {
                if (!string.IsNullOrEmpty(Words[w]))
                {
                    // Find the pairs of characters
                    String[] PairsInWord = LetterPairs(Words[w]);

                    for (int p = 0; p < PairsInWord.Length; p++)
                    {
                        AllPairs.Add(PairsInWord[p]);
                    }
                }
            }

            return AllPairs;
        }

        /// <summary>
        /// Generates an array containing every
        /// two consecutive letters in the input string
        /// </summary>
        /// <param name="str"></param>
        /// <returns></returns>
        private string[] LetterPairs(string str)
        {
            int numPairs = str.Length - 1;

            string[] pairs = new string[numPairs];

            for (int i = 0; i < numPairs; i++)
            {
                pairs[i] = str.Substring(i, 2);
            }

            return pairs;
        }

    }
}
